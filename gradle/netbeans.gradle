apply from: "$rootDir/gradle/netbeans-source.gradle"
apply from: "$rootDir/gradle/netbeans-test.gradle"

dependencies {
    def nb_module = clusters.modulesByName[project.name]
    
    if (nb_module != null) {
        nb_module.externalDeps.each { dep ->
            if (projectDir.name.startsWith('libs.')) {
                api dep
            } else {
                implementation dep 
            }
        }
        nb_module.dependencies.each { dep ->
            implementation project(":${dep.codeNameBase}")
        }
        if (nb_module.testDependencies['unit'] != null) {
            nb_module.testDependencies['unit'].each {dep -> 
                if (!dep.test) {
                    def testProject = findProject(":${dep.codeNameBase}-test")
                    def projectPath = testProject == null ? ":${dep.codeNameBase}" : ":${dep.codeNameBase}-test"
                    testImplementation project(path: projectPath, configuration: 'testApi')
                } else {
                    testImplementation project(":${dep.codeNameBase}")
                }
            }
        }
    }
}

task copyExternals
build.dependsOn copyExternals

ext.projectProps.each {k, v ->
    if (k.startsWith('release.external/')) {
        def extName = k.substring('release.external/'.length())
        def targetDir = v.substring(0, v.lastIndexOf('/'))
        def targetName = v.substring(v.lastIndexOf('/') + 1);
        def taskName = extName.replaceAll('!', "_").replaceAll('/', '_');
        if (extName.contains('!')) {
            
        } else {
            task ("copyExternal-$taskName", type: Copy) {
                from configurations.runtimeClasspath
                into new File(clusterBuildDir, targetDir)
                include extName
                rename (extName, targetName)
            }
            copyExternals.dependsOn("copyExternal-$taskName")
        }
    }
}

